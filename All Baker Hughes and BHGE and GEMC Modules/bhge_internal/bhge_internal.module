<?php

/**
 * @file
 * Custom module bhge_internal.
 */

use Drupal\file\FileInterface;

/**
 * Implements hook_file_download().
 */
function bhge_internal_file_download($uri) {
  // Get the file record based on the URI. If not in the database just return.
  /** @var \Drupal\file\FileInterface[] $files */
  $files = entity_load_multiple_by_properties('file', ['uri' => $uri]);
  if (count($files)) {
    foreach ($files as $item) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($item->getFileUri() === $uri) {
        $file = $item;
        break;
      }
    }
  }
  if (!isset($file)) {
    return;
  }

  // Find out if a temporary file is still used in the system.
  if ($file->isTemporary()) {
    $usage = \Drupal::service('file.usage')->listUsage($file);
    if (empty($usage) && $file->getOwnerId() != \Drupal::currentUser()->id()) {
      // Deny access to temporary files without usage that are not owned by the
      // same user. This prevents the security issue that a private file that
      // was protected by field permissions becomes available after its usage
      // was removed and before it is actually deleted from the file system.
      // Modules that depend on this behavior should make the file permanent
      // instead.
      return -1;
    }
  }

  // Stop processing if anonomous.
  if (\Drupal::currentUser()->isAnonymous()) {
    return;
  }

  ini_set('memory_limit', '1024M');

  // Access is granted.
  $headers = file_get_content_headers($file);
  return $headers;
}

/**
 * Implements hook_file_presave().
 */
function bhge_internal_file_presave(FileInterface $file) {

  // Force all files as private.
  $orgUri = $file->getFileUri();
  $fileName = $file->getFilename();
  $newUri = str_replace('public://', 'private://', $file->getFileUri());
  if ($orgUri !== $newUri) {
    $newDirectory = dirname($newUri);

    // Create directory if it doesnt exist.
    file_prepare_directory($newDirectory, FILE_CREATE_DIRECTORY);
    file_unmanaged_move($orgUri, $newUri);
    $file->setFileUri($newUri);
    $file->set('uri', $newUri);
  }
}
